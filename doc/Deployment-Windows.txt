1  Installation for production

	1.1  Download and install Node.js from https://nodejs.org/en/download/
	
		 1.1.1  Unzip the file to D:/ and rename it to be node/
		 1.1.2  Copy install.bat to node/
		 1.1.3  Run the install.bat to create the Windows service and add an icon on the desktop
		 1.1.4  Update nodemon
		 		$  npm i -g nodemon
	
	1.2  Download and install CouchDB 2.2.0 from http://couchdb.apache.org/#download

		 1.2.1  Install CouchDB on a computer and zip the folders
		 1.2.2  Unzip the file to D:/ and rename it to be couchdb/
		 1.2.3  Copy install.bat to couchdb/
		 1.2.4  Run the install.bat to create the Windows service and add an icon on the desktop
		 1.2.5  Download the couchdb-backup.sh from https://github.com/danielebailo/couchdb-dump
		 
	1.3  Configure CouchDB
	
		 1.3.1  Start the server
		 		> C:/couchdb/bin/couchdb.cmd -couch_ini C:\COUCHDB\etc\default.ini C:\COUCHDB\etc\local.ini
		 		> cd C:\COUCHDB
		 		> bin\couchdb.cmd -a H:\COUCHDB\etc\local.ini
		 1.3.2  Change port to 8825 in H:\COUCHDB\etc\local.ini
		 		[chttpd]
				port = 8825
		 1.3.3  Change log path and interval in etc/default.ini
				[stats]
				; Stats collection interval in seconds. Default 10 seconds.
				; interval = 10
				file = ./var/log/couchdb.log
		 1.3.4  Open http://localhost:8825/_utils for accessing Futon
		 1.3.5  Create Admins: bingobo/841101c
		 1.3.6	Create database: users
		 1.3.7	Modify server/conf/config.dev: 
		 		config.cloud.credential = 'bingobo:841101c@';
		 
	1.4  Initialize database
		 $ cd server
		 $ node models/init.js
		 
	1.5  Use CouchDB		 
		 1.5.5  Start GitBash from C:\Program Files\Git\bin\GitBash
		 1.5.6  Add New Documents
		 		$ curl -X POST http://127.0.0.1:8825/test_db/ -d '{"name": "Ash Ketchum", "age": 10, "type": "trainer"}' -H "Content-Type: application/json"
		 1.5.6  Retrieve Documents to return the id, key and value of the document
		 		$ curl -X GET http://127.0.0.1:8825/test_db/_all_docs
		 1.5.7  Retrieve Documents to return the contents
		 		$ curl -X GET http://127.0.0.1:8825/test_db/_all_docs?include_docs=true
		 1.5.8  Retrieve a specific document
		 		$ curl -X GET http://127.0.0.1:8825/test_db/cc6b37f1e6b2215f2a5ccac38c000a43
		 1.5.9  Retrieve a specific revision
		 		$ curl -X GET http://127.0.0.1:8825/test/cc6b37f1e6b2215f2a5ccac38c000a43?rev=1-61280846062dcdb986c5a6c4aa9aaf03
		 1.5.10 Update Documents
				$ curl -X PUT http://127.0.0.1:8825/test_db/cc6b37f1e6b2215f2a5ccac38c000a43 -d '{"_rev": "1-61280846062dcdb986c5a6c4aa9aaf03", "name": "Ash Ketchum", "age": 12, "type": "trainer"}' -H "Content-Type: application/json"
		 1.5.11 Update Documents
				$ curl -X DELETE http://127.0.0.1:8825/test_db/cc6b37f1e6b2215f2a5ccac38c000a43?rev=2-0023f19d7d3097468a8eeec014018840
		 1.5.12 Query the view
				$ curl "http://127.0.0.1:8825/test_db/_design/pokemon/_view/by_type?key=%22water%22"
		 1.5.13 Backup and Restore
		 		$ bash couchdb-backup.sh -b -H 127.0.0.1 -d <database_name> -f <backup_file_name>.json -u <username? -p <password>
		 		$ bash couchdb-backup.sh -r -H 127.0.0.1 -d <database_name> -f <backup_file_name>.json -u <username? -p <password>

	1.6  Download and install npm packages
		 $ npm install
		 or
		 $ npm i basic-auth body-parser connect-ensure-login cookie-parser cors debug ejs ejs-locals errorhandler express express-session morgan nano npm passport passport-local path serve-favicon validator bcrypt debug
		 https://www.freecodecamp.org/forum/t/solved-cant-install-bcrypt/76994
		 Run as Administrator
		 $ npm install --global --production windows-build-tools
		 $ npm install -g node-gyp
		 $ npm install bcrypt --save

	1.7  Set up debugging mode
		 $ cd server
		 $ set DEBUG=http,routes,db,auth,why,why_util,apps,apps_util,devices,devices_util,apps_users
		 $ nodemon index.js
		 http://localhost:3000/
		 
	1.8  Run in production mode
		 $ NODE_ENV=production node server.js
		 
	1.9  Use NODE_PATH in package.json
		 {
		   "name": "node_path",
		   "version": "1.0.0",
		   "description": "",
		   "main": "index.js",
		   "scripts": {
		     "start": "NODE_PATH=lib node index.js"
  		 },
		 $ npm start
		 
	1.10 Configure Node server and database server ports in server/config/config.dev
			config.db.host = 'localhost';
			config.db.port = 8825;
	
			config.web.port = process.env.WEB_PORT || 3000;
			config.web.session_expired = 600000; // 60000*60*24
	
	
2  Installation for development environment

	2.1  Install Git
		 https://git-scm.com/downloads
	     $ git --version 
	     $ git config --global user.name "fx90034"
	     $ git config --global user.email "fx90034@gmail.com"
	     $ cat .gitconfig
	     $ git config --list
	     
	2.2  Install Express
	     $ npm install express --save

	2.3  Install database tools
	     $ npm install nano --save
	     
	2.4  Install debugging tools
		 $ npm install -g nodemon


3  Use Git

	3.1  Start a new repository and publish it to GitHub

		3.1.1 Create a new directory, and initialize it with git-specific functions
   	     	  $ git init <project_name>
   	     	  $ cd my-repo
   	     	  
		3.1.2 Create and stage a new file
   	     	  $ touch README.md
   	     	  $ git add README.md
   	     	  $ git config --global user.email fx90034@gmail.com
   	     	  $ git commit -m "add README to initial commit"

		3.1.3 Push changes to github
   	     	  $ git remote add origin <url>
   	     	  // URL: https://github.com/<username>/<project_name>.git
   	     	  $ git push --set-upstream origin master

	3.2  Contribute to an existing repository

		3.2.1 Download a repository on GitHub.com to our machine
   	     	  $ git clone https://github.com/fx90034/dude
   	     	  $ cd dude
   	     	  
		3.2.2 Create a new branch to store any new changes	  
   	     	  $ git branch fx

		3.2.3 Switch to the branch
   	     	  $ git checkout fx
   	     	  
   	    3.2.4 Stage the changed files
   	     	  $ git add file1.md file2.md
   	     	  $ git commit -m "my snapshot"
   	     	  
   	    3.2.5 Diff file before commit
   	    	  $ git diff <myfile>
   	    	  $ git diff --cached <myfile> // see already added changes
   	     	  
		3.2.5 Push changes to the branch or the master
   	     	  $ git push [--set-upstream origin my-branch]
   	     	  $ git push [origin master]
   	     	  
   	    3.2.6 Pull changes from master
   	     	  $ git checkout -- <file> // to discard changes in working directory
   	     	  $ git pull origin master
   	     	  https://www.quora.com/What-are-the-differences-between-git-pull-git-pull-origin-master-and-git-pull-origin-master

	3.3  Make a pull request
	
		3.3.1 Click the  Pull Request tab
		3.3.2 From the Pull Request page, click the green New pull request button
		3.3.3 In the Example Comparisons box, select the branch you made to compare with master (the original)
		3.3.4 Give your pull request a title and write a brief description of your changes
		3.3.5 When you’re satisfied that these are the changes you want to submit, click the big green Create Pull Request button
		3.3.6 Click the green Merge pull request button to merge the changes into master
		3.3.7 Click Confirm merge button
		3.3.8 (Optional) Go ahead and delete the branch, since its changes have been incorporated, with the Delete branch button in the purple box
		
	3.4  Git commands 
	     
	     $ git status
	     $ git rm -r folder-name
	     $ git checkout -- <file> // to discard changes in working directory
		 $ git diff
		 $ git reset
		 $ git reset --soft
		 $ git reset --hard
		 $ git merge --rebase (fast forward merge)
		 $ git merge --no -ff (recursive merge)


4  Use TortoiseGit

	4.1  Install TortoiseGit
		 https://tortoisegit.org/download/
	4.2	 Search for "PuTTYgen" program and click the "Generate" button, enter the passphrase: bingo123, then click "Save private key"
	4.3  Copy the public key and go to github.com, then add it to the SSL Keys
	4.4	 Create a file and right click the file, then click "Git commit"
	4.5	 Go to GitHub to create a project and copy the origin URL (main or branch)
	4.6	 Right click the file and choose TortoiseGit -> Push, enter the origin URL for the Repository, upload the PuTTYkey		 

5  Bootstrap

	5.1  Keep footer at the bottom of the page
		 <div class="navbar navbar-default navbar-static-bottom navbar-fixed-bottom">
		 
	